{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "type": "string",
      "metadata": {
        "description": "The location in which the resources should be deployed."
      }
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "The vnet name where the gateway will be connected."
      }
    },
    "sqlAdminUserName": {
      "type": "string",
      "metadata": {
        "description": "The name for the sql server admin user."
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the sql server admin user."
      }
    },
    "sqlAadAdminSid": {
      "type": "string",
      "metadata": {
        "description": "The SID for the AAD user to be the AD admin for the database server"
      }
    },
    "zoneRedundant": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "True for high availability deployments, False otherwise."
      }
    },
    "allowedSubnetNames": {
      "type": "string",
      "metadata": {
        "description": "Comma separated subnet names that can access the services."
      }
    }
  },
  "variables": {
    "vnetName": "[if(endsWith(parameters('vnetName'), '\r'),substring(parameters('vnetName'),0,sub(length(parameters('vnetName')),1)),parameters('vnetName'))]",
    "cosmosName": "[concat('votingcosmos-',uniqueString(resourceGroup().id))]",
    "cosmosDatabaseName": "cacheDB",
    "cosmosContainerName": "cacheContainer",
    "cosmosPartitionKeyPaths": [
      "/MessageType"
    ],
    "sqlServerName": "[concat('sqlserver', uniqueString(resourceGroup().id))]",
    "sqlDatabaseName": "voting",
    "serviceBusName": "[concat('votingservicebus', uniqueString(resourceGroup().id))]",
    "serviceBusQueue": "votingqueue",
    "resourcesStorageAccountName": "[toLower(concat('resources', uniqueString(resourceGroup().id)))]",
    "resourcesContainerName": "rscontainer",
    "keyVaultName": "[concat( 'keyvault-',uniqueString(resourceGroup().id) ) ]",
    "allowedSubnetNamesArray": "[split(parameters('allowedSubnetNames'), ',')]"
  },
  "resources": [
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2019-12-12",
      "name": "[variables('cosmosName')]",
      "location": "[parameters('location')]",
      "tags": {
        "defaultExperience": "Core (SQL)"
      },
      "kind": "GlobalDocumentDB",
      "properties": {
        "ipRangeFilter": "",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": true,
        "isVirtualNetworkFilterEnabled": true,
        "copy": [
          {
            "name": "virtualNetworkRules",
            "count": "[length(variables('allowedSubnetNamesArray'))]",
            "input": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('allowedSubnetNamesArray')[copyIndex('virtualNetworkRules')])]"
            }
          }
        ],
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxIntervalInSeconds": 5,
          "maxStalenessPrefix": 100
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": "[parameters('zoneRedundant')]"
          }
        ],
        "capabilities": []
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2019-12-12",
      "name": "[concat(variables('cosmosName'), '/', variables('cosmosDatabaseName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cosmosDatabaseName')]"
        },
        "options": {
          "throughput": "400"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2019-12-12",
      "name": "[concat(variables('cosmosName'), '/', variables('cosmosDatabaseName'), '/', variables('cosmosContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), variables('cosmosDatabaseName'))]"
      ],
      "properties": {
        "options": {
          "throughput": "400"
        },
        "resource": {
          "id": "[variables('cosmosContainerName')]",
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          },
          "partitionKey": {
            "paths": "[variables('cosmosPartitionKeyPaths')]",
            "kind": "Hash"
          }
        }
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('sqlServerName')]",
      "location": "[parameters('location')]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdminUserName')]",
        "administratorLoginPassword": "[parameters('sqlAdminPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "type": "databases",
          "apiVersion": "2017-10-01-preview",
          "name": "[variables('sqlDatabaseName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[variables('sqlServerName')]"
          ],
          "sku": {
            "name": "[if(parameters('zoneRedundant'), 'BC_Gen5', 'GP_Gen5')]",
            "tier": "[if(parameters('zoneRedundant'), 'BusinessCritical', 'GeneralPurpose')]",
            "family": "Gen5",
            "capacity": 2
          },
          "kind": "v12.0,user,vcore",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "maxSizeBytes": "1073741824",
            "zoneRedundant": "[parameters('zoneRedundant')]"
          }
        },
        {
          "name": "activeDirectory",
          "type": "administrators",
          "apiVersion": "2018-06-01-preview",
          "dependsOn": [
            "[variables('sqlServerName')]"
          ],
          "location": "[parameters('location')]",
          "properties": {
            "administratorType": "ActiveDirectory",
            "login": "ADMIN",
            "sid": "[parameters('sqlAadAdminSid')]",
            "tenantId": "[subscription().tenantId]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Sql/servers/virtualNetworkRules",
      "apiVersion": "2015-05-01-preview",
      "name": "[concat(variables('sqlServerName'), '/allow-subnet-sql-', copyIndex())]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
      ],
      "properties": {
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('allowedSubnetNamesArray')[copyIndex()])]"
      },
      "copy": {
        "name": "sqlVirtualNetworkRuleCopy",
        "count": "[length(variables('allowedSubnetNamesArray'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "accessPolicies": [],
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny",
          "copy": [
            {
              "name": "virtualNetworkRules",
              "count": "[length(variables('allowedSubnetNamesArray'))]",
              "input": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('allowedSubnetNamesArray')[copyIndex('virtualNetworkRules')])]"
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/CosmosKey')]",
      "apiVersion": "2015-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts',variables('cosmosName')),'2015-04-08').primaryMasterKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/ServiceBusListenerConnectionString')]",
      "apiVersion": "2015-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', variables('serviceBusName'), 'ListenerSharedAccessKey')]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules',variables('serviceBusName'),'ListenerSharedAccessKey'),'2015-08-01').primaryConnectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/ServiceBusSenderConnectionString')]",
      "apiVersion": "2015-06-01",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', variables('serviceBusName'), 'SenderSharedAccessKey')]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules',variables('serviceBusName'),'SenderSharedAccessKey'),'2015-08-01').primaryConnectionString]"
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[variables('serviceBusName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Premium",
        "tier": "Premium",
        "capacity": 1
      },
      "properties": {
        "zoneRedundant": "[parameters('zoneRedundant')]"
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('serviceBusName'), '/ListenerSharedAccessKey')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ],
      "properties": {
        "rights": [
          "Listen"
        ]
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('serviceBusName'), '/SenderSharedAccessKey')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ],
      "properties": {
        "rights": [
          "Send"
        ]
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2017-04-01",
      "name": "[concat(variables('serviceBusName'), '/', variables('serviceBusQueue'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ],
      "properties": {
        "lockDuration": "PT1M",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
        "deadLetteringOnMessageExpiration": false,
        "enableBatchedOperations": true,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "status": "Active",
        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
        "enablePartitioning": false,
        "enableExpress": false
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces/virtualnetworkrules",
      "apiVersion": "2018-01-01-preview",
      "name": "[concat(variables('serviceBusName'), '/allow-subnet-sb-', copyIndex())]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusName'))]"
      ],
      "properties": {
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('allowedSubnetNamesArray')[copyIndex()])]"
      },
      "copy": {
        "name": "sbVirtualNetworkRuleCopy",
        "count": "[length(variables('allowedSubnetNamesArray'))]"
      }
    },

    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('resourcesStorageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "[if(parameters('zoneRedundant'), 'Standard_ZRS', 'Standard_LRS')]",
        "tier": "Standard"
      },
      "properties": {
        "accessTier": "Hot"
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2018-07-01",
          "name": "[concat('default/', variables('resourcesContainerName'))]",
          "dependsOn": [
            "[variables('resourcesStorageAccountName')]"
          ],
          "properties": {
            "publicAccess": "Blob"
          }
        }
      ]
    }
  ],
  "outputs": {
    "cosmosDbName": {
      "value": "[variables('cosmosName')]",
      "type": "string"
    },
    "sqlServerName": {
      "value": "[variables('sqlServerName')]",
      "type": "string"
    },
    "sqlDatabaseName": {
      "value": "[variables('sqlDatabaseName')]",
      "type": "string"
    },
    "resourcesStorageAccountName": {
      "value": "[variables('resourcesStorageAccountName')]",
      "type": "string"
    },
    "resourcesContainerName": {
      "value": "[variables('resourcesContainerName')]",
      "type": "string"
    },
    "keyVaultName": {
      "value": "[variables('keyVaultName')]",
      "type": "string"
    }
  }
}
