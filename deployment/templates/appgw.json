{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location in which the resources should be deployed."
      }
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "The vnet name where the gateway will be connected."
      }
    },
    "appgwSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The ip address prefix that gateway will use."
      }
    },
    "appgwApplications": {
      "type": "array",
      "metadata": {
        "description": "List of applications to configure. Each element format is: { name, hostName, backendAddresses, certificate: { data, password }, probePath }"
      }
    },
    "appgwZones": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Comma separated application gateway zones."
      }
    }
  },
  "variables": {
    "vnetName": "[if(endsWith(parameters('vnetName'), '\r'),substring(parameters('vnetName'),0,sub(length(parameters('vnetName')),1)),parameters('vnetName'))]",
    "appgwName": "appgw",
    "appgwId": "[resourceId('Microsoft.Network/applicationGateways', variables('appgwName'))]",
    "appgwSubnetName": "[concat('appgw-subnet-', variables('appgwName'))]",
    "appgwSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('appgwSubnetName'))]",
    "appgwNSGName": "[concat(variables('vnetName'),'-APPGW-NSG')]",
    "appgwPublicIpAddressName": "AppGatewayIp",
    "appGwPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('appgwPublicIpAddressName'))]",
    "appgwIpConfigName": "[concat(variables('appgwName'), '-ipconfig')]",
    "appgwFrontendName": "[concat(variables('appgwName'), '-frontend')]",
    "appgwBackendName": "[concat(variables('appgwName'), '-backend-')]",
    "appgwHttpSettingsName": "[concat(variables('appgwName'), '-httpsettings-')]",
    "appgwHealthProbeName": "[concat(variables('appgwName'), '-healthprobe-')]",
    "appgwListenerName": "[concat(variables('appgwName'), '-listener-')]",
    "appgwSslCertificateName": "[concat(variables('appgwName'), '-ssl-')]",
    "appgwRouteRulesName": "[concat(variables('appgwName'), '-routerules-')]",
    "appgwAutoScaleMinCapacity": 0,
    "appgwAutoScaleMaxCapacity": 10,
    "appgwZonesArray": "[if(empty(parameters('appgwZones')),json('null'),split(parameters('appgwZones'), ','))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-11-01",
      "name": "[variables('appgwPublicIpAddressName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },

    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-11-01",
      "name": "[variables('appgwNSGName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "[variables('appgwNSGName')]"
      },
      "properties": {
        "securityRules": [
          {
            "name": "APPGW-inbound-allow_infrastructure",
            "properties": {
              "description": "Used to manage AppGW from Azure",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "65200-65535",
              "sourceAddressPrefix": "GatewayManager",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "APPGW-Inbound-load-balancer",
            "properties": {
              "description": "Allow communication from Load Balancer",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 201,
              "direction": "Inbound"
            }
          },
          {
            "name": "APPGW-inbound-allow_web",
            "properties": {
              "description": "Allow web traffic from internet",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "80",
                "443"
              ],
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "[parameters('appgwSubnetAddressPrefix')]",
              "access": "Allow",
              "priority": 202,
              "direction": "Inbound"
            }
          }
        ]
      }
    },

    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2019-11-01",
      "name": "[concat(variables('vnetName'), '/', variables('appgwSubnetName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('appgwNSGName'))]"
      ],
      "properties": {
        "addressPrefix": "[parameters('appgwSubnetAddressPrefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('appgwNSGName'))]"
        }
      }
    },
    
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2019-11-01",
      "name": "[variables('appgwName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('appgwSubnetId')]",
        "[variables('appGwPublicIpAddressId')]"
      ],
      "zones": "[variables('appgwZonesArray')]",
      "tags": {},
      "properties": {
        "sku": {
          "name": "WAF_v2",
          "tier": "WAF_v2"
        },
        "gatewayIPConfigurations": [
          {
            "name": "[variables('appgwIpConfigName')]",
            "properties": {
              "subnet": {
                "id": "[variables('appgwSubnetId')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('appgwFrontendName')]",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('appGwPublicIpAddressId')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "port_443",
            "properties": {
              "Port": 443
            }
          }
        ],
        "autoscaleConfiguration": {
          "minCapacity": "[variables('appgwAutoScaleMinCapacity')]",
          "maxCapacity": "[variables('appgwAutoScaleMaxCapacity')]"
        },
        "webApplicationFirewallConfiguration": {
          "enabled": true,
          "firewallMode": "Detection",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.0"
        },
        "enableHttp2": false,
        "copy": [
          {
            "name": "backendAddressPools",
            "count": "[length(parameters('appgwApplications'))]",
            "input": {
              "name": "[concat(variables('appgwBackendName'), parameters('appgwApplications')[copyIndex('backendAddressPools')].name)]",
              "properties": {
                "backendAddresses": "[parameters('appgwApplications')[copyIndex('backendAddressPools')].backendAddresses]"
              }
            }
          },
          {
            "name": "backendHttpSettingsCollection",
            "count": "[length(parameters('appgwApplications'))]",
            "input": {
              "name": "[concat(variables('appgwHttpSettingsName'), parameters('appgwApplications')[copyIndex('backendHttpSettingsCollection')].name)]",
              "properties": {
                "Port": 443,
                "Protocol": "Https",
                "cookieBasedAffinity": "Disabled",
                "pickHostNameFromBackendAddress": true,
                "requestTimeout": 20,
                "probe": {
                  "id": "[concat(variables('appgwId'), '/probes/', variables('appgwHealthProbeName'), parameters('appgwApplications')[copyIndex('backendHttpSettingsCollection')].name)]"
                }
              }
            }
          },
          {
            "name": "httpListeners",
            "count": "[length(parameters('appgwApplications'))]",
            "input": {
              "name": "[concat(variables('appgwListenerName'), parameters('appgwApplications')[copyIndex('httpListeners')].name)]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[concat(variables('appgwId'), '/frontendIPConfigurations/', variables('appgwFrontendName'))]"
                },
                "frontendPort": {
                  "id": "[concat(variables('appgwId'), '/frontendPorts/port_443')]"
                },
                "protocol": "Https",
                "sslCertificate": {
                  "id": "[concat(variables('appgwId'), '/sslCertificates/', variables('appgwSslCertificateName'), parameters('appgwApplications')[copyIndex('httpListeners')].name)]"
                },
                "hostName": "[parameters('appgwApplications')[copyIndex('httpListeners')].hostName]",
                "requireServerNameIndication": true
              }
            }
          },
          {
            "name": "requestRoutingRules",
            "count": "[length(parameters('appgwApplications'))]",
            "input": {
              "Name": "[concat(variables('appgwRouteRulesName'), parameters('appgwApplications')[copyIndex('requestRoutingRules')].name)]",
              "properties": {
                "RuleType": "Basic",
                "httpListener": {
                  "id": "[concat(variables('appgwId'), '/httpListeners/', variables('appgwListenerName'), parameters('appgwApplications')[copyIndex('requestRoutingRules')].name)]"
                },
                "backendAddressPool": {
                  "id": "[concat(variables('appgwId'), '/backendAddressPools/', variables('appgwBackendName'), parameters('appgwApplications')[copyIndex('requestRoutingRules')].name)]"
                },
                "backendHttpSettings": {
                  "id": "[concat(variables('appgwId'), '/backendHttpSettingsCollection/', variables('appgwHttpSettingsName'), parameters('appgwApplications')[copyIndex('requestRoutingRules')].name)]"
                }
              }
            }
          },
          {
            "name": "probes",
            "count": "[length(parameters('appgwApplications'))]",
            "input": {
              "name": "[concat(variables('appgwHealthProbeName'), parameters('appgwApplications')[copyIndex('probes')].name)]",
              "properties": {
                "protocol": "Https",
                "path": "[parameters('appgwApplications')[copyIndex('probes')].probePath]",
                "interval": 30,
                "timeout": 30,
                "unhealthyThreshold": 3,
                "pickHostNameFromBackendHttpSettings": true,
                "minServers": 0,
                "match": {
                  "statusCodes": [
                    "200-399"
                  ]
                }
              }
            }
          },
          {
            "name": "sslCertificates",
            "count": "[length(parameters('appgwApplications'))]",
            "input": {
              "name": "[concat(variables('appgwSslCertificateName'), parameters('appgwApplications')[copyIndex('sslCertificates')].name)]",
              "properties": {
                "data": "[parameters('appgwApplications')[copyIndex('sslCertificates')].certificate.data]",
                "password": "[parameters('appgwApplications')[copyIndex('sslCertificates')].certificate.password]"
              }
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "appGwPublicIpAddress": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('appgwPublicIpAddressName'))).ipAddress]",
      "type": "string"
    }
  }
}
